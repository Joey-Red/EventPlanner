/* global gapi */
import React, { useState, useEffect } from "react";
import Axios from "axios";
import { Helmet, HelmetProvider } from "react-helmet-async";
import { gapi } from "gapi-script";
import GoogleLogin from "react-google-login";
function App() {
  const [listOfUsers, setListOfUsers] = useState([{}]);
  // const [name, setName] = useState("");
  // const [age, setAge] = useState(0);
  const [listOfPosts, setListOfPosts] = useState([{}]);
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [passwordConfirm, setPasswordConfirm] = useState("");
  const [logInPw, setLogInPw] = useState("");
  const [logInPwConfirm, setLogInPwConfirm] = useState("");
  const [logInUsername, setLogInUsername] = useState("");
  const [postTitle, setPostTitle] = useState("");
  const [postBody, setPostBody] = useState("");
  const [currentUser, setCurrentUser] = useState("");
  // New States
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [email, setEmail] = useState("");
  const [token, setToken] = useState("");

  const responseGoogle = (response) => {
    if (response.error) {
      console.log("Error :)");
    } else {
      console.log(response);
      // setFirstName(response.wt.rV);
      // setLastName(response.wt.uT);
      // setEmail(response.wt.cu);
      // setToken(response.tokenObj);
      //
      Axios.post("http://localhost:8080/log-in", {
        firstName: response.wt.rV,
        lastName: response.wt.uT,
        email: response.wt.cu,
        token: response.tokenObj,
      }).then((res) => {
        // setCurrentUser(res.data);
        console.log(res);
      });
    }
  };

  // const logIn = () => {
  //   Axios.post("http://localhost:8080/log-in", {
  //     firstName: firstName,
  //     lastName: lastName,
  //     email: email,
  //     token: token,
  //   }).then((res) => {
  //     // setCurrentUser(res.data);
  //     console.log(res);
  //   });
  // };

  // Fetch Posts
  // useEffect(() => {
  //   Axios.get("http://localhost:8080/getPosts").then((res) => {
  //     setListOfPosts(res.data);
  //   });
  // }, []);
  // // Fetch Users
  // useEffect(() => {
  //   Axios.get("http://localhost:8080/getUsers").then((res) => {
  //     setListOfUsers(res.data);
  //   });
  //   //Probably dont keep this condition
  //   // vvvvvvvvvv
  // }, []);
  // Log In
  // const logIn = () => {
  //   Axios.post("http://localhost:8080/log-in", {
  //     username: logInUsername,
  //     password: logInPw,
  //   }).then((res) => {
  //     setCurrentUser(res.data);
  //   });
  // };
  // Submit Post
  // const submitPost = () => {
  //   Axios.post("http://localhost:8080/create-post", {
  //     postTitle: postTitle,
  //     postBody: postBody,
  //     username: currentUser,
  //   }).then((res) => {
  //     setListOfPosts([...listOfPosts, { postTitle, postBody, username }]);
  //   });
  // };
  // Create User
  const createUser = () => {
    // call google log in, get username then send username to
    Axios.post("http://localhost:8080/sign-up", {
      username: username,
    });
  };
  function onSignIn(googleUser) {
    var profile = googleUser.getBasicProfile();
    console.log("ID: " + profile.getId()); // Do not send to your backend! Use an ID token instead.
    console.log("Name: " + profile.getName());
    console.log("Image URL: " + profile.getImageUrl());
    console.log("Email: " + profile.getEmail()); // This is null if the 'email' scope is not present.
  }
  function signOut() {
    var auth2 = gapi.auth2.getAuthInstance();
    auth2.signOut().then(function () {
      console.log("User signed out.");
    });
  }

  // Not sure how neccesary these are?
  function onSuccess(googleUser) {
    console.log("Logged in as: " + googleUser.getBasicProfile().getName());
    console.log(googleUser.Nw.wt.NT.Ad);
    // If they have an account log in
    // Axios.post("http://localhost:8080/log-in", {
    //   username: logInUsername,
    //   password: logInPw,
    // }).then((res) => {
    //   // setCurrentUser(res.data);
    //   console.log(res)
    // });
    // If not, create account
  }
  function onFailure(error) {
    console.log(error);
  }
  //

  function renderButton() {
    gapi.signin2.render("my-signin2", {
      scope: "profile email",
      width: 240,
      height: 50,
      longtitle: true,
      theme: "dark",
      onsuccess: onSuccess,
      onfailure: onFailure,
    });
  }
  // useEffect(() => {
  // gapi.load("client:auth2", function () {
  //   gapi.auth2.init({ client_id: process.env.REACT_APP_GOOGLE_CLIENT_ID });
  // });
  // }, []);

  return (
    <HelmetProvider>
      <div className="App">
        <Helmet>
          <script
            src="https://apis.google.com/js/platform.js"
            async
            defer
          ></script>
          <meta
            name="google-signin-client_id"
            content="974182046934-b2o71cjdsu6mfvuhm30u4q7t5o2e0q72.apps.googleusercontent.com.apps.googleusercontent.com"
          />
          <script
            src="https://apis.google.com/js/platform.js?onload=renderButton"
            async
            defer
          ></script>
        </Helmet>
        {/* <div className="h1">Sign Up</div> */}
        <div className="logIn">
          {/* <div className="h1">Log In</div> */}
          {/* Google log in, if user exists, 
        log in, if not create account */}
          {/* <div className="g-signin2" data-onsuccess="onSignIn">
            Log In
          </div>
          <button>Submit</button> */}
          <GoogleLogin
            clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}
            buttonText="Login"
            onSuccess={responseGoogle}
            onFailure={responseGoogle}
            cookiePolicy={"single_host_origin"}
          />
        </div>
        <div className="logOut">
          <button href="#" onClick={() => signOut()}>
            Sign out
          </button>
        </div>
        {/* <div className="createPost">
        <div className="h1">Create Post</div>
        <input
          type="text"
          placeholder="title"
          onChange={(e) => {
            setPostTitle(e.target.value);
          }}
        />
        <input
          type="text"
          placeholder="so this one time.."
          onChange={(e) => {
            setPostBody(e.target.value);
          }}
        />
        <button onClick={submitPost}>Submit</button>
      </div> */}
        {/* <div>
        {listOfPosts.map((post) => {
          return (
            <div key={post._id}>
              Username: {post.user} Title: {post.title}
              Body: {post.body}
            </div>
          );
        })}
      </div>
      <div>
        {listOfUsers.map((user) => {
          return <div key={user._id}>Username: {user.username}</div>;
        })}
      </div> */}
      </div>
    </HelmetProvider>
  );
}

export default App;
